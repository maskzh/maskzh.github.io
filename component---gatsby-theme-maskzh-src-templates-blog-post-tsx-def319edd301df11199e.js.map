{"version":3,"sources":["webpack:///../gatsby-theme-maskzh/src/components/article.tsx","webpack:///../gatsby-theme-maskzh/src/templates/blog-post.tsx"],"names":["Article","markdownRemark","frontmatter","title","tags","className","map","tag","key","onClick","lastTag","split","reverse","navigate","dangerouslySetInnerHTML","__html","html","BlogPost","path","data","site","posts","useContext","PostContext","location","useLocation","queryString","parse","search","articles","filter","article","isTagInclude","slug","sort","a","b","dayjs","date","unix","slice","to","siteMetadata","console","log","style","maxWidth","length","content","format"],"mappings":"uOAGe,SAASA,EAAT,GAAqC,IAAlBC,EAAkB,EAAlBA,eAAkB,EAG9CA,EADFC,YAAeC,EAFiC,EAEjCA,MAAOC,EAF0B,EAE1BA,KAQxB,OACE,6BAASC,UAAU,QACjB,4BAAQA,UAAU,QAChB,wBAAIA,UAAU,2BAA2BF,GACxCC,GACC,yBAAKC,UAAU,SACZD,EAAKE,KAAI,SAACC,GAAD,OACR,0BACEC,IAAKD,EACLF,UAAU,8GACVI,QAAS,kBAdfC,EAcgCH,EAdVI,MAAM,KAAKC,UAAU,QACjDC,mBAAS,QAAQH,GAFnB,IACQA,IAWI,IAKIH,QAMZ,yBACEF,UAA0C,gBAC1CS,wBAAyB,CAAEC,OAAQd,EAAee,S,wCCvB3C,SAASC,EAAT,GAA4D,IAAxCC,EAAwC,EAAxCA,KAAwC,IAAlCC,KAAQC,EAA0B,EAA1BA,KAAMnB,EAAoB,EAApBA,eAC7CoB,EAAUC,qBAAWC,KAArBF,MACFG,EAAWC,wBACXlB,EAAMmB,IAAYC,MAAMH,EAASI,QAAQrB,IACzCsB,EAAWR,EACdS,QAAO,SAACC,GAAD,OAAaC,YAAaD,EAAQ3B,KAAMG,MAC/CuB,QAAO,SAACC,GAAD,OAAaA,EAAQE,OAASf,KACrCgB,MAAK,SAACC,EAAGC,GAAJ,OAAUC,IAAMD,EAAEE,MAAMC,OAASF,IAAMF,EAAEG,MAAMC,UACpDC,MAAM,EAAG,GAEZ,OACE,6BACE,kBAAC,OAAD,CAAMC,GAAG,IAAIpC,UAAU,mDACpBe,EAAKsB,aAAavC,OAEpBwC,QAAQC,IAAI3C,GACb,yBAAKI,UAAU,eAAewC,MAAO,CAAEC,SAAU,MAC/C,kBAAC,IAAD,CAAK3C,MAAOF,EAAeC,YAAYC,QACvC,kBAACH,EAAD,CAASC,eAAgBA,IACxB4B,EAASkB,OAAS,GAAK,wBAAI1C,UAAU,yBAAd,QACvBwB,EAASvB,KAAI,gBAAGH,EAAH,EAAGA,MAAOmC,EAAV,EAAUA,KAAMU,EAAhB,EAAgBA,QAASf,EAAzB,EAAyBA,KAAzB,OACZ,kBAAC,OAAD,CAAMzB,IAAKyB,EAAMQ,GAAIR,EAAM5B,UAAU,uBACnC,0BAAMA,UAAU,qCAAqCgC,IAAMC,GAAMW,OAAO,eACxE,wBAAI5C,UAAU,2CAA2CF,GACzD,uBAAGE,UAAU,8BAA8B2C","file":"component---gatsby-theme-maskzh-src-templates-blog-post-tsx-def319edd301df11199e.js","sourcesContent":["import { navigate } from '@reach/router';\nimport React from 'react';\n\nexport default function Article({ markdownRemark }) {\n  const {\n    frontmatter: { title, tags },\n  } = markdownRemark;\n\n  function onClickTag(fullTagName: string) {\n    const lastTag = fullTagName.split('/').reverse()[0];\n    navigate(`?tag=${lastTag}`);\n  }\n\n  return (\n    <article className=\"py-8\">\n      <header className=\"mb-8\">\n        <h1 className=\"mb-4 text-4xl font-bold\">{title}</h1>\n        {tags && (\n          <div className=\"-mx-1\">\n            {tags.map((tag: string) => (\n              <span\n                key={tag}\n                className=\"inline-block px-3 py-1 mx-1 text-sm bg-red-50 rounded-full cursor-pointer hover:bg-red-500 hover:text-white\"\n                onClick={() => onClickTag(tag)}\n              >\n                #{tag}\n              </span>\n            ))}\n          </div>\n        )}\n      </header>\n      <div\n        className={false ? 'markdown-body dark' : 'markdown-body'}\n        dangerouslySetInnerHTML={{ __html: markdownRemark.html }}\n      ></div>\n    </article>\n  );\n}\n","import { useLocation } from '@reach/router';\nimport dayjs from 'dayjs';\nimport { graphql, Link } from 'gatsby';\nimport queryString from 'query-string';\nimport React, { useContext } from 'react';\nimport Article from '../components/article';\nimport SEO from '../components/seo';\nimport PostContext from '../context/PostContext';\nimport { isTagInclude } from '../utils/Tag';\n\nexport default function BlogPost({ path, data: { site, markdownRemark } }) {\n  const { posts } = useContext(PostContext);\n  const location = useLocation();\n  const tag = queryString.parse(location.search).tag;\n  const articles = posts\n    .filter((article) => isTagInclude(article.tags, tag as string))\n    .filter((article) => article.slug !== path)\n    .sort((a, b) => dayjs(b.date).unix() - dayjs(a.date).unix())\n    .slice(0, 3);\n\n  return (\n    <div>\n      <Link to=\"/\" className=\"block py-2 shadow text-lg font-bold text-center\">\n        {site.siteMetadata.title}\n      </Link>\n      {console.log(markdownRemark)}\n      <div className=\"px-6 mx-auto\" style={{ maxWidth: 800 }}>\n        <SEO title={markdownRemark.frontmatter.title} />\n        <Article markdownRemark={markdownRemark} />\n        {articles.length > 0 && <h3 className=\"text-base font-medium\">延伸阅读</h3>}\n        {articles.map(({ title, date, content, slug }) => (\n          <Link key={slug} to={slug} className=\"block py-4 border-b\">\n            <time className=\"text-gray-400 text-xs font-medium\">{dayjs(date).format('YYYY-MM-DD')}</time>\n            <h3 className=\"text-base text-black font-bold truncate\">{title}</h3>\n            <p className=\"mt-1 text-sm text-gray-800\">{content}</p>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      rawMarkdownBody\n      timeToRead\n      wordCount {\n        paragraphs\n        sentences\n        words\n      }\n      frontmatter {\n        title\n        tags\n        created\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}