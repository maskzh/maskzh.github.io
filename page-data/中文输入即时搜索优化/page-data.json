{"componentChunkName":"component---gatsby-theme-maskzh-src-templates-blog-post-tsx","path":"/中文输入即时搜索优化/","result":{"data":{"site":{"siteMetadata":{"title":"ZYC's Blog"}},"markdownRemark":{"html":"<p>实现输入即时搜索的功能，一个 <code>input</code>，并监听它的 <code>input</code> 或<code>keyup</code>的事件，获取实时输入的值进行搜索。</p>\n<p>但这么做有一个问题就是，在用户还没完成输入前，就造成了很多不必要的请求。因此需要合理地判断用户是否完成了输入。</p>\n<p>我们可以选择让用户手动点击搜索按钮或者按回车键来明确告诉程序他们完成了输入。但即时搜索也是必要的，它能增强搜索体验，例如进行关键词提示等等。</p>\n<p>那么在即时搜索下，如何合理地判断用户完成了输入呢？延时，用户在输入后的一定时间间隔中没有再次输入，则可以识别为用户完成了输入。这个方法不是完美的，因为对用户而言，最好的体验是用户输完最后一个字就立即开始搜索。但它是目前最主流的解决方法了。</p>\n<p>通过给搜索的方法增加防抖的功能来实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> searchFnDebounce <span class=\"token operator\">=</span> lodash<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>searchFn<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>通过防抖，已经能减少大部分不必要的请求了。但还有一些明确不应该请求的情况，我们也要将它排除掉。例如输入中文时，输入拼音合成为中文前，期间的停顿都应该要忽略。</p>\n<p> <code>input</code> 有<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event\">compositionstart</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event\">compositionend</a>以及<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionupdate_event\">compositionupdate</a>事件，分别代表输入合成开始、结束、进行中。例如开始输入中文时就是触发<code>compositionstart</code>事件，每输入一个字符就是触发 1 次<code>compositionupdate</code>事件，选完中文字词之后就会触发<code>compositionend</code>事件。你可以在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event#%E5%8A%A8%E6%80%81%E6%BC%94%E7%A4%BA\">这里</a>，观察事件执行的时机。</p>\n<p>通过对 <code>input</code> 进行封装，增加一个<code>composing</code>，在<code>compositionstart</code>时，设为<code>true</code>，<code>compositionend</code>时，设为<code>false</code>。并在<code>searchFn</code>中过滤掉<code>composing</code>为<code>true</code>的情况。</p>\n<p>这样基本上就完成即时搜索的优化。</p>\n<p>另外还有一点需要注意，对搜索请求的响应，不能以时序上最后一个响应作为结果。 虽然收到响应的顺序通常就是发起请求的顺序。</p>\n<p>但还是可能会出现请求的响应先后不一致的情况，先请求的后收到了。因此要确定响应是否为最后一个搜索词的响应。可以通过响应中搜索词是否与最后的搜索词一致来判断。或者使用 RxJS，RxJS 可以确保响应流和请求顺序一致。即时搜索是使用 RxJS 很好的一个场景。</p>","rawMarkdownBody":"\n实现输入即时搜索的功能，一个 `input`，并监听它的 `input` 或`keyup`的事件，获取实时输入的值进行搜索。\n\n但这么做有一个问题就是，在用户还没完成输入前，就造成了很多不必要的请求。因此需要合理地判断用户是否完成了输入。\n\n我们可以选择让用户手动点击搜索按钮或者按回车键来明确告诉程序他们完成了输入。但即时搜索也是必要的，它能增强搜索体验，例如进行关键词提示等等。\n\n那么在即时搜索下，如何合理地判断用户完成了输入呢？延时，用户在输入后的一定时间间隔中没有再次输入，则可以识别为用户完成了输入。这个方法不是完美的，因为对用户而言，最好的体验是用户输完最后一个字就立即开始搜索。但它是目前最主流的解决方法了。\n\n通过给搜索的方法增加防抖的功能来实现。\n\n```js\nconst searchFnDebounce = lodash.debounce(searchFn, 300)\n```\n\n通过防抖，已经能减少大部分不必要的请求了。但还有一些明确不应该请求的情况，我们也要将它排除掉。例如输入中文时，输入拼音合成为中文前，期间的停顿都应该要忽略。\n\n `input` 有[compositionstart](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event)、[compositionend](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event)以及[compositionupdate](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionupdate_event)事件，分别代表输入合成开始、结束、进行中。例如开始输入中文时就是触发`compositionstart`事件，每输入一个字符就是触发 1 次`compositionupdate`事件，选完中文字词之后就会触发`compositionend`事件。你可以在[这里](https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event#%E5%8A%A8%E6%80%81%E6%BC%94%E7%A4%BA)，观察事件执行的时机。\n\n通过对 `input` 进行封装，增加一个`composing`，在`compositionstart`时，设为`true`，`compositionend`时，设为`false`。并在`searchFn `中过滤掉`composing`为`true`的情况。\n\n这样基本上就完成即时搜索的优化。\n\n另外还有一点需要注意，对搜索请求的响应，不能以时序上最后一个响应作为结果。 虽然收到响应的顺序通常就是发起请求的顺序。\n\n但还是可能会出现请求的响应先后不一致的情况，先请求的后收到了。因此要确定响应是否为最后一个搜索词的响应。可以通过响应中搜索词是否与最后的搜索词一致来判断。或者使用 RxJS，RxJS 可以确保响应流和请求顺序一致。即时搜索是使用 RxJS 很好的一个场景。\n","timeToRead":2,"wordCount":{"paragraphs":11,"sentences":11,"words":74},"frontmatter":{"title":"中文输入即时搜索优化","tags":["Tech/Web"],"created":"2021-03-17"}}},"pageContext":{"slug":"/中文输入即时搜索优化/","language":"en","i18n":{"language":"en","languages":["en","zh"],"defaultLanguage":"en","routed":false,"resources":{"en":{"translation":{"home":"Home","not found":"Not found","create date":"CREATE DATE","search articles":"Search","articles":"Articles"}}},"originalPath":"/中文输入即时搜索优化/","path":"/中文输入即时搜索优化/"}}},"staticQueryHashes":["1985809839","1985809839","63159454"]}