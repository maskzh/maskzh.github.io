{"componentChunkName":"component---gatsby-theme-maskzh-src-templates-blog-post-tsx","path":"/zh/DroneCI使用Gitee作为代码源/","result":{"data":{"site":{"siteMetadata":{"title":"ZYC's Blog"}},"markdownRemark":{"html":"<p>DroneCI 当前还不支持 Gitee，自己实现又比较费时，但是可以通过自定义 clone 的 step 来实现。</p>\n<p>思路是这样的，提交代码后，同时推送代码到 Github 和 Gitee，DroneCI 响应 Github 的 Webhook 开始工作，通过自定义 clone 行为，拉取 Gitee 的代码而不是 GitHub 的代码，进行后续的任务。</p>\n<p>同步推送代码到多个代码仓库有多种方式，无感且不需要额外代码推荐下面这种方式。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@gitee.com:org/repo.git\n<span class=\"token function\">git</span> remote set-url <span class=\"token parameter variable\">--add</span> <span class=\"token parameter variable\">--push</span> git@github.com:org/repo.git</code></pre></div>\n<p>通过<code>git remote -v</code>，会得到</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">origin\tgit@gitee.com:org/repo.git (fetch)\norigin\tgit@gitee.com:org/repo.git (push)\norigin\tgit@github.com:org/repo.git (push)</code></pre></div>\n<p>这样配置后，推送时就会同时（串行）推送到 Github 和 Gitee 了。</p>\n<p><code>.drone.yml</code>的样例参考：</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> pipeline\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> docker\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> publish\n\n<span class=\"token key atrule\">clone</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">disable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 这里将默认的 clone 行为 disable 掉</span>\n\n<span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># 自定义 clone 的 step</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> clone\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> alpine/git\n    <span class=\"token key atrule\">commands</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> export TMPFILE=$(mktemp) <span class=\"token important\">&amp;&amp;</span> echo \"$GIT_CLONE_KEY\" <span class=\"token punctuation\">></span> $TMPFILE\n      <span class=\"token punctuation\">-</span> git clone git@gitee.com<span class=\"token punctuation\">:</span>org/repo.git . <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>depth 1 <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>config core.sshCommand=\"ssh <span class=\"token punctuation\">-</span>i $TMPFILE <span class=\"token punctuation\">-</span>o StrictHostKeyChecking=no\"\n      <span class=\"token punctuation\">-</span> git checkout $DRONE_COMMIT\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">GIT_CLONE_KEY</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">from_secret</span><span class=\"token punctuation\">:</span> git_clone_key</code></pre></div>\n<p><code>GIT_CLONE_KEY</code>通过在 DroneCI 的项目设置中的 Secrets 中添加。</p>\n<p>需要注意的是：DroneCI 有 GitHub 的授权，但没有 Gitee 的授权。因此这里尝试解决了 Gitee 私有仓库的权限问题。</p>\n<p>生成一组密钥对，将公钥配置到 Gitee 的部署公钥中，私钥则配置在 DroneCI Secrets。当然也可以通过用户名密码或 Token 来授权，但部署公钥是更好的选择，便于控制授权，且部署公钥仅能 clone 和 pull 代码。</p>\n<p><code>git clone</code>命令无法直接使用私钥 string，所以得将私钥 string 写入到文件中来使用，所以这里写得比较啰嗦，可能有更简单的用法。</p>","rawMarkdownBody":"\nDroneCI 当前还不支持 Gitee，自己实现又比较费时，但是可以通过自定义 clone 的 step 来实现。\n\n思路是这样的，提交代码后，同时推送代码到 Github 和 Gitee，DroneCI 响应 Github 的 Webhook 开始工作，通过自定义 clone 行为，拉取 Gitee 的代码而不是 GitHub 的代码，进行后续的任务。\n\n同步推送代码到多个代码仓库有多种方式，无感且不需要额外代码推荐下面这种方式。\n\n```bash\ngit remote add origin git@gitee.com:org/repo.git\ngit remote set-url --add --push git@github.com:org/repo.git\n```\n\n通过`git remote -v`，会得到\n\n```\norigin\tgit@gitee.com:org/repo.git (fetch)\norigin\tgit@gitee.com:org/repo.git (push)\norigin\tgit@github.com:org/repo.git (push)\n```\n\n这样配置后，推送时就会同时（串行）推送到 Github 和 Gitee 了。\n\n`.drone.yml`的样例参考：\n\n```yaml\nkind: pipeline\ntype: docker\nname: publish\n\nclone:\n  disable: true # 这里将默认的 clone 行为 disable 掉\n\nsteps:\n\t# 自定义 clone 的 step\n  - name: clone\n    image: alpine/git\n    commands:\n      - export TMPFILE=$(mktemp) && echo \"$GIT_CLONE_KEY\" > $TMPFILE\n      - git clone git@gitee.com:org/repo.git . --depth 1 --config core.sshCommand=\"ssh -i $TMPFILE -o StrictHostKeyChecking=no\"\n      - git checkout $DRONE_COMMIT\n    environment:\n      GIT_CLONE_KEY:\n        from_secret: git_clone_key\n```\n\n`GIT_CLONE_KEY`通过在 DroneCI 的项目设置中的 Secrets 中添加。\n\n需要注意的是：DroneCI 有 GitHub 的授权，但没有 Gitee 的授权。因此这里尝试解决了 Gitee 私有仓库的权限问题。\n\n生成一组密钥对，将公钥配置到 Gitee 的部署公钥中，私钥则配置在 DroneCI Secrets。当然也可以通过用户名密码或 Token 来授权，但部署公钥是更好的选择，便于控制授权，且部署公钥仅能 clone 和 pull 代码。\n\n`git clone`命令无法直接使用私钥 string，所以得将私钥 string 写入到文件中来使用，所以这里写得比较啰嗦，可能有更简单的用法。\n","timeToRead":2,"wordCount":{"paragraphs":10,"sentences":10,"words":83},"frontmatter":{"title":"DroneCI 使用 Gitee 作为代码源","tags":["Tech/DevOps"],"created":"2021-03-09"}}},"pageContext":{"slug":"/DroneCI使用Gitee作为代码源/","language":"zh","i18n":{"language":"zh","languages":["en","zh"],"defaultLanguage":"en","routed":true,"resources":{"zh":{"translation":{"home":"首页","not found":"找不到该页面","create date":"创建日期","search articles":"搜索","articles":"文章列表"}}},"originalPath":"/DroneCI使用Gitee作为代码源/","path":"zh/DroneCI使用Gitee作为代码源/"}}},"staticQueryHashes":["1985809839","1985809839","63159454"]}