{"componentChunkName":"component---gatsby-theme-maskzh-src-templates-blog-post-tsx","path":"/前后端分离的项目该如何部署/","result":{"data":{"site":{"siteMetadata":{"title":"ZYC's Blog"}},"markdownRemark":{"html":"<p>传统的项目中，后端项目一般都会有放置静态文件目录。可以把前端项目打包后放到后端的静态文件目录中，即可实现访问。</p>\n<p>但更建议的做法是使用 Nginx 来分别代理前端项目的入口文件，代理后端接口 API。</p>\n<h3>代理前端文件</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">location / {\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    try_files $uri $uri/ /index.html;\n}</code></pre></div>\n<p>这段就是配置前端文件放置的目录以及 index 对应的文件。如果你的项目是单页应用且使用 <code>Browser History</code>作为路由（例如：<code>https://example.com/route1</code>），那就需要加上<code>try_files $uri $uri/ /index.html;</code>这段，它会将访问的地址始终指向根目录下的<code>index.html</code>。</p>\n<h3>代理接口 API</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">location /api/ {\n    proxy_pass http://localhost:8080/;\n}</code></pre></div>\n<p>这段将接口 API 代理到 <code>/api/</code>下，访问<code>https://example.com/api/*</code>的请求都会被代理到<code>http://localhost:8080/</code>去。</p>\n<p>如此这样配置，前端和后端可在同一个域下访问。能满足单机的部署，对于简单项目已经可用了。</p>\n<p>现实后端的部署肯定是更加灵活的，集群、容器等等。例如可能会将服务暴露在<code>api.example.com</code>，与前端项目在不同的二级域名下，所以会遇到跨域的问题。</p>\n<p>给 api 的 location 增加跨域的配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">add_header 'Access-Control-Allow-Origin' $http_origin always;\nadd_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PATCH, DELETE' always;\nadd_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;\nadd_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;\nadd_header 'Access-Control-Allow-Credentials' true always;\nif ($request_method = 'OPTIONS') {\n  return 204;\n}</code></pre></div>\n<p>如果有携带 <code>cookie</code> 跨域的需求，<code>Access-Control-Allow-Origin</code>是不可设置为<code>*</code>的，所以这里使用了 <code>$http_origin</code>，但这里的配置只作为参考，请自行做白名单的处理。</p>\n<p>另外<code>Access-Control-Allow-xxx</code>设置为通配符<code>*</code>有浏览器兼容性的问题，所以需要设置准确的值。</p>\n<p>总结一点，通常会将前端打包的静态文件放在 CDN 上，入口文件则视业务而定，如果不是一定要满足同域，入口文件也可以直接放在 CDN 上。 后端则灵活部署，最终将服务暴露出来即可。</p>","rawMarkdownBody":"\n传统的项目中，后端项目一般都会有放置静态文件目录。可以把前端项目打包后放到后端的静态文件目录中，即可实现访问。\n\n但更建议的做法是使用 Nginx 来分别代理前端项目的入口文件，代理后端接口 API。\n\n### 代理前端文件\n\n```\nlocation / {\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    try_files $uri $uri/ /index.html;\n}\n```\n\n这段就是配置前端文件放置的目录以及 index 对应的文件。如果你的项目是单页应用且使用 `Browser History`作为路由（例如：`https://example.com/route1`），那就需要加上`try_files $uri $uri/ /index.html;`这段，它会将访问的地址始终指向根目录下的`index.html`。\n\n### 代理接口 API\n\n```\nlocation /api/ {\n    proxy_pass http://localhost:8080/;\n}\n```\n\n这段将接口 API 代理到 `/api/`下，访问`https://example.com/api/*`的请求都会被代理到`http://localhost:8080/`去。\n\n如此这样配置，前端和后端可在同一个域下访问。能满足单机的部署，对于简单项目已经可用了。\n\n现实后端的部署肯定是更加灵活的，集群、容器等等。例如可能会将服务暴露在`api.example.com`，与前端项目在不同的二级域名下，所以会遇到跨域的问题。\n\n给 api 的 location 增加跨域的配置。\n\n```\nadd_header 'Access-Control-Allow-Origin' $http_origin always;\nadd_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PATCH, DELETE' always;\nadd_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;\nadd_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;\nadd_header 'Access-Control-Allow-Credentials' true always;\nif ($request_method = 'OPTIONS') {\n  return 204;\n}\n```\n\n如果有携带 `cookie` 跨域的需求，`Access-Control-Allow-Origin`是不可设置为`*`的，所以这里使用了 `$http_origin`，但这里的配置只作为参考，请自行做白名单的处理。\n\n另外`Access-Control-Allow-xxx`设置为通配符`*`有浏览器兼容性的问题，所以需要设置准确的值。\n\n总结一点，通常会将前端打包的静态文件放在 CDN 上，入口文件则视业务而定，如果不是一定要满足同域，入口文件也可以直接放在 CDN 上。 后端则灵活部署，最终将服务暴露出来即可。\n","timeToRead":2,"wordCount":{"paragraphs":12,"sentences":12,"words":65},"frontmatter":{"title":"前后端分离的项目该如何部署？","tags":["Tech/DevOps"],"created":"2019-12-26"}}},"pageContext":{"slug":"/前后端分离的项目该如何部署/","language":"en","i18n":{"language":"en","languages":["en","zh"],"defaultLanguage":"en","routed":false,"resources":{"en":{"translation":{"home":"Home","not found":"Not found","create date":"CREATE DATE","search articles":"Search","articles":"Articles"}}},"originalPath":"/前后端分离的项目该如何部署/","path":"/前后端分离的项目该如何部署/"}}},"staticQueryHashes":["1985809839","1985809839","63159454"]}