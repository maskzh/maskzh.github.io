{"componentChunkName":"component---gatsby-theme-maskzh-src-templates-blog-post-tsx","path":"/Goodbye-reach-router/","result":{"data":{"site":{"siteMetadata":{"title":"ZYC's Blog"}},"markdownRemark":{"html":"<p>在<a href=\"https://github.com/reach/router\">reach-router</a>彻底死掉之前，记录一下它存在过。<a href=\"https://github.com/reach/router\">reach-router</a>的作者是<a href=\"https://twitter.com/ryanflorence\">Ryan Florence</a>，他同时也是<a href=\"https://github.com/ReactTraining/react-router\">react-router</a>的作者之一。</p>\n<p>19年作者表示reach-router将会在reach-router中新生（<a href=\"https://reacttraining.com/blog/reach-react-router-future\">React Training: The Future of React Router and @reach/router</a>）。</p>\n<p>现在回头一看，原来react-router 5.x早在两年前就发布了。这两年我一直有在使用 reach-router，因为它功能够用、表达简洁。</p>\n<p>对比react-router和reach-router Router的写法。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span><span class=\"token comment\">/* react-router */</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">exact</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/dashboard<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DashboardRoute</span></span> <span class=\"token attr-name\">prop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n\t  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token punctuation\">{</span><span class=\"token comment\">/* reach-router */</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DashboardRoute</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/dashboard<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prop</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Router</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>可以看出 reach-router 简洁许多。</p>\n<p>reach-router还有一个很棒的特性是<a href=\"https://reach.tech/router/nesting\">Nesting and Relative Links</a>，举个例子，比如你当前处于<code>/dashboard</code>。</p>\n<p>前往<code>/dashboard/trends</code>，你可以有下面两种写法，第二种写法就是Relative Links。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/dashboard/trends<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>trends<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>如果你要返回<code>/dashboard</code>，你还可以这么写。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Link</span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>当然react-router4.x也开始支持Nesting and Relative Links了，但不如reach-router实现得好。</p>\n<p>这是reach-router印象较为深刻的特性，除此之外reach-router是更容易上手的，概念更少，也更符合直觉。</p>\n<p>reach-router定义的路由，默认就是严格匹配的，如果你想模糊匹配你就必须用<a href=\"https://reach.tech/router/api/RouteComponent\">Trailing Wildcard</a>。\n例如定义嵌套路由的写法，UserCenter 中会定义嵌套路由。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span><span class=\"token comment\">/* reach-router */</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserCenter</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user/*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">{</span><span class=\"token comment\">/* react-router */</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n\t</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserCenter</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Route</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>这就是我觉得reach-router更符合直觉的地方。</p>\n<p>当然话说回来，相对react-router，reach-router的简洁也意味简陋，很多特性是缺失的，例如拦截路由进出等功能。还是推荐大家使用react-router吧，Goodbye reach-router。</p>","rawMarkdownBody":"\n在[reach-router](https://github.com/reach/router)彻底死掉之前，记录一下它存在过。[reach-router](https://github.com/reach/router)的作者是[Ryan Florence](https://twitter.com/ryanflorence)，他同时也是[react-router](https://github.com/ReactTraining/react-router)的作者之一。\n\n19年作者表示reach-router将会在reach-router中新生（[React Training: The Future of React Router and @reach/router](https://reacttraining.com/blog/reach-react-router-future)）。\n\n现在回头一看，原来react-router 5.x早在两年前就发布了。这两年我一直有在使用 reach-router，因为它功能够用、表达简洁。\n\n对比react-router和reach-router Router的写法。\n```jsx\n{/* react-router */}\n<Router>\n\t<Switch>\n\t  <Route exact path=\"/dashboard\">\n\t\t<DashboardRoute prop={false} />\n\t  </Route>\n\t</Switch>\n</Router>\n\n{/* reach-router */}\n<Router>\n\t<DashboardRoute path=\"/dashboard\" prop={false} />\n</Router>\n```\n可以看出 reach-router 简洁许多。\n\nreach-router还有一个很棒的特性是[Nesting and Relative Links](https://reach.tech/router/nesting)，举个例子，比如你当前处于`/dashboard`。\n\n前往`/dashboard/trends`，你可以有下面两种写法，第二种写法就是Relative Links。\n```jsx\n<Link to=\"/dashboard/trends\" />\n<Link to=\"trends\" />\n```\n\n如果你要返回`/dashboard`，你还可以这么写。\n```jsx\n<Link to=\"../\" />\n```\n\n当然react-router4.x也开始支持Nesting and Relative Links了，但不如reach-router实现得好。\n\n这是reach-router印象较为深刻的特性，除此之外reach-router是更容易上手的，概念更少，也更符合直觉。\n\nreach-router定义的路由，默认就是严格匹配的，如果你想模糊匹配你就必须用[Trailing Wildcard](https://reach.tech/router/api/RouteComponent)。\n例如定义嵌套路由的写法，UserCenter 中会定义嵌套路由。\n```jsx\n{/* reach-router */}\n<UserCenter path=\"/user/*\" />\n{/* react-router */}\n<Route path=\"/user\">\n\t<UserCenter/>\n<Route>\n```\n这就是我觉得reach-router更符合直觉的地方。\n\n当然话说回来，相对react-router，reach-router的简洁也意味简陋，很多特性是缺失的，例如拦截路由进出等功能。还是推荐大家使用react-router吧，Goodbye reach-router。\n","timeToRead":2,"wordCount":{"paragraphs":13,"sentences":13,"words":65},"frontmatter":{"title":"Goodbye reach-router","tags":["Tech/Web"],"created":"2021-03-18"}}},"pageContext":{"slug":"/Goodbye-reach-router/","language":"en","i18n":{"language":"en","languages":["en","zh"],"defaultLanguage":"en","routed":false,"resources":{"en":{"translation":{"home":"Home","not found":"Not found","create date":"CREATE DATE","search articles":"Search","articles":"Articles"}}},"originalPath":"/Goodbye-reach-router/","path":"/Goodbye-reach-router/"}}},"staticQueryHashes":["1985809839","1985809839","63159454"]}